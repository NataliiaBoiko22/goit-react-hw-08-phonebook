{"version":3,"file":"static/js/595.a96cfe3c.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactList/ContactItem/contactItem.module.css?8044","components/Modal/Modal.js","redux/contacts/selectors.js","webpack://react-homework-template/./src/components/ContactFormEdit/contactFormEdit.module.css?d930","components/ContactFormEdit/ContactFormEdit.js","components/Modal/ModalConfirm.js","components/ContactList/ContactItem/ContactItem.jsx","webpack://react-homework-template/./src/components/ContactList/contactList.module.css?ddc0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/filter.module.css?e01c","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ContactForm/contactForm.module.css?2173","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/pages/Contacts/contacts.module.css?eff6","pages/Contacts/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactInfo\":\"contactItem_contactInfo__7xXae\",\"buttonStyle\":\"contactItem_buttonStyle__cUsnx\",\"name\":\"contactItem_name__TrJX7\"};","import Modal from 'react-bootstrap/Modal';\nimport PropTypes from 'prop-types';\n\nexport const ModalContact = ({\n  title,\n  component: Component,\n  onClose,\n  id,\n  userName,\n  userNumber,\n}) => {\n  return (\n    <>\n      <Modal.Header closeButton>\n        <Modal.Title>{title}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Component\n          onClose={onClose}\n          id={id}\n          userName={userName}\n          userNumber={userNumber}\n        />\n      </Modal.Body>\n    </>\n  );\n};\n\nModalContact.propTypes = {\n  title: PropTypes.string.isRequired,\n  component: PropTypes.elementType.isRequired,\n  onClose: PropTypes.func.isRequired,\n  id: PropTypes.string,\n  userName: PropTypes.string,\n  userNumber: PropTypes.string,\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts;\nexport const selectFilterValue = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilterValue],\n  ({ items }, filterValue) => {\n    const normalizedFilter = filterValue.toLowerCase();\n    const filterContacts = items.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n    return filterContacts;\n  }\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"formStyle\":\"contactFormEdit_formStyle__ETCOd\",\"buttonEditWrapper\":\"contactFormEdit_buttonEditWrapper__BmOt1\",\"buttonEdit\":\"contactFormEdit_buttonEdit__d+s3T\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { updateContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport PropTypes from 'prop-types';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport css from './contactFormEdit.module.css';\nimport FloatingLabel from 'react-bootstrap/FloatingLabel';\n\nexport const ContactFormEdit = ({ onClose, id, userName, userNumber }) => {\n  const { items } = useSelector(selectContacts);\n  const [validated, setValidated] = useState(false);\n  const [name, setName] = useState(userName);\n  const [number, setNumber] = useState(userNumber);\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target: { name, value } }) => {\n    console.log(value);\n    switch (name) {\n      case 'name':\n        return setName(value);\n      case 'number':\n        return setNumber(value);\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    let isName = false;\n\n    if (name === '' || number === '') {\n      toast.error('Please, fill in all fields');\n      return;\n    }\n\n    if (form.checkValidity() === false) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n    setValidated(true);\n    if (items && items.length > 0) {\n      items.forEach(({ name: existedName }) => {\n        if (\n          name.toLowerCase() === existedName.toLowerCase() &&\n          name.toLowerCase() !== userName.toLowerCase()\n        ) {\n          toast.error(`${name} is already in contacts`);\n          isName = true;\n        }\n      });\n    }\n\n    if (!isName) {\n      dispatch(updateContact({ id, name, number }));\n      onClose();\n      setName('');\n      setNumber('');\n      setValidated(false);\n    }\n  };\n\n  return (\n    <Form\n      className={css.formStyle}\n      onSubmit={handleSubmit}\n      validated={validated}\n    >\n      <Form.Group className=\"mb-3\" controlId=\"formGroupName\">\n        <FloatingLabel controlId=\"floatingName\" label=\"Name\" className=\"mb-3\">\n          <Form.Control\n            required\n            type=\"text\"\n            placeholder=\"Enter your name\"\n            onChange={handleChange}\n            name=\"name\"\n            value={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            minLength=\"1\"\n            maxLength=\"20\"\n          />\n        </FloatingLabel>\n      </Form.Group>\n      <Form.Group className=\"mb-3\" controlId=\"formGroupNumber\">\n        <FloatingLabel\n          controlId=\"floatingInput\"\n          label=\"Number\"\n          className=\"mb-3\"\n        >\n          <Form.Control\n            required\n            type=\"tel\"\n            placeholder=\"Enter number\"\n            onChange={handleChange}\n            name=\"number\"\n            value={number}\n            pattern=\"[0-9()\\-\\s]+\"\n            minLength=\"5\"\n            maxLength=\"20\"\n          />\n        </FloatingLabel>\n      </Form.Group>\n      <div className={css.buttonEditWrapper}>\n        <Button className={css.buttonEdit} type=\"submit\">\n          Save changes\n        </Button>\n      </div>\n    </Form>\n  );\n};\n\nContactFormEdit.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  id: PropTypes.string.isRequired,\n  userName: PropTypes.string.isRequired,\n  userNumber: PropTypes.string.isRequired,\n};\n","import Modal from 'react-bootstrap/Modal';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport Button from 'react-bootstrap/Button';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const DeleteConfirmationModal = ({ id, name, onHide }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = () => {\n    dispatch(deleteContact(id));\n    onHide();\n  };\n\n  return (\n    <Modal show={true} onHide={onHide}>\n      <Modal.Header closeButton>\n        <Modal.Title>Delete contact</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        Are you sure you want to delete a contact \"{name}\"?\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={onHide}>\n          Cancel\n        </Button>\n        <Button variant=\"danger\" onClick={handleDelete}>\n          Delete\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nDeleteConfirmationModal.propTypes = {\n  onHide: PropTypes.func.isRequired,\n  id: PropTypes.string,\n  name: PropTypes.string,\n};\n","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport css from './contactItem.module.css';\nimport Button from 'react-bootstrap/Button';\nimport { BsTrash3, BsPencilSquare } from 'react-icons/bs';\nimport { ModalContact } from 'components/Modal/Modal';\nimport Modal from 'react-bootstrap/Modal';\nimport { ContactFormEdit } from 'components/ContactFormEdit/ContactFormEdit';\nimport { DeleteConfirmationModal } from 'components/Modal/ModalConfirm';\n\nexport const ContactItem = ({ contact: { id, name, number } }) => {\n  const [show, setShow] = useState(false);\n  const [deletingContactId, setDeletingContactId] = useState('');\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <>\n      <div className={css.contactInfo}>\n        <div className={css.name}>{name}</div> <div> {number}</div>\n      </div>\n      <div>\n        <Button\n          className={css.buttonStyle}\n          type=\"button\"\n          onClick={() => handleShow()}\n        >\n          <BsPencilSquare />\n        </Button>\n        <Button\n          className={css.buttonStyle}\n          type=\"button\"\n          onClick={() => {\n            setShowDeleteModal(true);\n            setDeletingContactId(id);\n          }}\n        >\n          <BsTrash3 />\n        </Button>\n      </div>\n      {show && (\n        <Modal\n          show={show}\n          onHide={handleClose}\n          backdrop=\"static\"\n          keyboard={false}\n        >\n          <ModalContact\n            title={'Edit contact'}\n            component={ContactFormEdit}\n            onClose={handleClose}\n            id={id}\n            userName={name}\n            userNumber={number}\n            isEdit={true}\n          />\n        </Modal>\n      )}\n      {showDeleteModal && (\n        <DeleteConfirmationModal\n          id={deletingContactId}\n          name={name}\n          onHide={() => setShowDeleteModal(false)}\n        />\n      )}\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsUl\":\"contactList_contactsUl__ly3ez\",\"contactsItem\":\"contactList_contactsItem__XyraL\"};","import { ContactItem } from 'components/ContactList/ContactItem/ContactItem';\nimport { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport css from './contactList.module.css';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n\n  return (\n    <ul className={css.contactsUl}>\n      {contacts.map(contact => (\n        <li className={css.contactsItem} key={contact.id}>\n          <ContactItem contact={contact} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"floatingLabel\":\"filter_floatingLabel__jufTL\",\"filterInput\":\"filter_filterInput__2T6yn\",\"filterWrapper\":\"filter_filterWrapper__+RAQX\",\"inputGroup\":\"filter_inputGroup__osn-F\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/filter/filtersSlice';\nimport { selectFilterValue } from 'redux/contacts/selectors.js';\nimport css from './filter.module.css';\nimport FloatingLabel from 'react-bootstrap/FloatingLabel';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport { BsSearch } from 'react-icons/bs';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(selectFilterValue);\n  return (\n    <div className={css.filterWrapper}>\n      <InputGroup className={css.inputGroup}>\n        <InputGroup.Text>\n          <BsSearch size=\"20\" />\n        </InputGroup.Text>\n        <FloatingLabel\n          className={css.floatingLabel}\n          controlId=\"floatingInput\"\n          label=\"Find contact by name\"\n        >\n          <Form.Control\n            className={css.filterInput}\n            type=\"text\"\n            placeholder=\"Enter email\"\n            value={filterValue}\n            onChange={e => dispatch(filterContacts(e.currentTarget.value))}\n          />\n        </FloatingLabel>\n      </InputGroup>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"contactForm_form__3ay0L\",\"buttonAdd\":\"contactForm_buttonAdd__WLnKX\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport PropTypes from 'prop-types';\nimport css from './contactForm.module.css';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport FloatingLabel from 'react-bootstrap/FloatingLabel';\n\nexport const ContactForm = ({ onClose }) => {\n  const { items } = useSelector(selectContacts);\n  const [validated, setValidated] = useState(false);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        return setName(value);\n      case 'number':\n        return setNumber(value);\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    let isName = false;\n\n    if (name === '' || number === '') {\n      toast.error('Please, fill in all fields');\n      return;\n    }\n\n    if (form.checkValidity() === false) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n    setValidated(true);\n    if (items && items.length > 0) {\n      items.forEach(({ name: existedName }) => {\n        if (name.toLowerCase() === existedName.toLowerCase()) {\n          toast.error(`${name} is already in contacts`);\n          isName = true;\n        }\n      });\n    }\n\n    if (!isName) {\n      dispatch(addContact({ name, number }));\n      onClose();\n      setName('');\n      setNumber('');\n      setValidated(false);\n    }\n  };\n\n  return (\n    <Form className={css.form} onSubmit={handleSubmit} validated={validated}>\n      <Form.Group className=\"mb-3\" controlId=\"formGroupName\">\n        <FloatingLabel controlId=\"floatingName\" label=\"Name\" className=\"mb-3\">\n          <Form.Control\n            required\n            type=\"text\"\n            placeholder=\"Enter your name\"\n            onChange={handleChange}\n            name=\"name\"\n            value={name}\n            minLength=\"1\"\n            maxLength=\"20\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          />\n        </FloatingLabel>\n      </Form.Group>\n      <Form.Group className=\"mb-3\" controlId=\"formGroupNumber\">\n        <FloatingLabel\n          controlId=\"floatingInput\"\n          label=\"Number\"\n          className=\"mb-3\"\n        >\n          <Form.Control\n            required\n            type=\"tel\"\n            placeholder=\"Enter number\"\n            onChange={handleChange}\n            name=\"number\"\n            value={number}\n            pattern=\"[0-9()\\-\\s]+\"\n            minLength=\"5\"\n            maxLength=\"20\"\n          />\n        </FloatingLabel>\n      </Form.Group>\n      <Button className={css.buttonAdd} type=\"submit\">\n        Add contact\n      </Button>\n    </Form>\n  );\n};\n\nContactForm.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"sectionContacts\":\"contacts_sectionContacts__NZb8q\",\"buttonAdd\":\"contacts_buttonAdd__4zRA-\",\"addIcon\":\"contacts_addIcon__icF8I\",\"newContacts\":\"contacts_newContacts__lVlCr\",\"noContacts\":\"contacts_noContacts__q26kn\"};","import { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Loader } from 'components/Loader/Loader';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { useEffect, useState } from 'react';\nimport { IoMdPersonAdd } from 'react-icons/io';\nimport { ModalContact } from 'components/Modal/Modal';\nimport Modal from 'react-bootstrap/Modal';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport css from './contacts.module.css';\nconst Contacts = () => {\n  const { items, isLoading, error } = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <main className={css.sectionContacts}>\n      <button className={css.buttonAdd} type=\"button\" onClick={handleShow}>\n        <IoMdPersonAdd className={css.addIcon} />{' '}\n        <span className={css.newContacts}>New contact</span>\n      </button>\n      <Filter />\n      {isLoading && <Loader />}\n      {error && <div>Sorry, something went wrong :( Please try again</div>}\n      {items.length > 0 && !isLoading && <ContactList />}\n      {!isLoading && items.length === 0 && (\n        <div className={css.noContacts}>There are no contacts yet</div>\n      )}\n      {show && (\n        <Modal\n          show={show}\n          backdrop=\"static\"\n          keyboard={false}\n          onHide={handleClose}\n        >\n          <ModalContact\n            title={'Add contact'}\n            component={ContactForm}\n            onClose={handleClose}\n          />\n        </Modal>\n      )}\n    </main>\n  );\n};\n\nexport default Contacts;\n"],"names":["ModalContact","title","Component","component","onClose","id","userName","userNumber","Modal","closeButton","selectContacts","state","contacts","selectFilterValue","filter","selectVisibleContacts","createSelector","filterValue","items","normalizedFilter","toLowerCase","name","includes","ContactFormEdit","useSelector","useState","validated","setValidated","setName","number","setNumber","dispatch","useDispatch","handleChange","target","value","console","log","Form","className","css","onSubmit","e","preventDefault","form","currentTarget","isName","checkValidity","stopPropagation","length","forEach","existedName","toast","updateContact","controlId","FloatingLabel","label","required","type","placeholder","onChange","pattern","minLength","maxLength","Button","DeleteConfirmationModal","onHide","show","variant","onClick","deleteContact","ContactItem","contact","setShow","deletingContactId","setDeletingContactId","showDeleteModal","setShowDeleteModal","handleClose","backdrop","keyboard","isEdit","ContactList","map","Filter","InputGroup","size","filterContacts","ContactForm","addContact","isLoading","error","useEffect","fetchContacts","Loader"],"sourceRoot":""}